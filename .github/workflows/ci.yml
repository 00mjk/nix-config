{
  "jobs": {
    "checkCI": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v2"
        },
        {
          "uses": "cachix/install-nix-action@v12",
          "with": {
            "extra_nix_config": "experimental-features = nix-command flakes",
            "install_url": "https://github.com/numtide/nix-flakes-installer/releases/download/nix-3.0pre20201007_5257a25/install",
            "nix_path": "nixpkgs=channel:nixos-unstable-small"
          }
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the builder\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the builder with nix\nbuilder_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  1                                    # speed factor\n  big-parallel                         # features\n)\necho \"${builder_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "uses": "cachix/cachix-action@v7",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'"
          }
        },
        {
          "name": "ci up-to-date check",
          "run": "cp ./.github/workflows/ci.yml /tmp/ci.yml.old\nnix run .#gen-ci\ndiff ./.github/workflows/ci.yml /tmp/ci.yml.old || exit 1\n"
        }
      ]
    },
    "feuerbach": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v2"
        },
        {
          "uses": "cachix/install-nix-action@v12",
          "with": {
            "extra_nix_config": "experimental-features = nix-command flakes",
            "install_url": "https://github.com/numtide/nix-flakes-installer/releases/download/nix-3.0pre20201007_5257a25/install",
            "nix_path": "nixpkgs=channel:nixos-unstable-small"
          }
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the builder\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the builder with nix\nbuilder_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  1                                    # speed factor\n  big-parallel                         # features\n)\necho \"${builder_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "uses": "cachix/cachix-action@v7",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'"
          }
        },
        {
          "name": "Build",
          "run": "nix run nixpkgs#nix-build-uncached -- \\\n  -E \"(builtins.getFlake (toString ./.)).deploy.nodes.feuerbach.profiles.system.path\"\n"
        }
      ]
    },
    "foucault": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v2"
        },
        {
          "uses": "cachix/install-nix-action@v12",
          "with": {
            "extra_nix_config": "experimental-features = nix-command flakes",
            "install_url": "https://github.com/numtide/nix-flakes-installer/releases/download/nix-3.0pre20201007_5257a25/install",
            "nix_path": "nixpkgs=channel:nixos-unstable-small"
          }
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the builder\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the builder with nix\nbuilder_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  1                                    # speed factor\n  big-parallel                         # features\n)\necho \"${builder_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "uses": "cachix/cachix-action@v7",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'"
          }
        },
        {
          "name": "Build",
          "run": "nix run nixpkgs#nix-build-uncached -- \\\n  -E \"(builtins.getFlake (toString ./.)).deploy.nodes.foucault.profiles.system.path\"\n"
        }
      ]
    },
    "fourier": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v2"
        },
        {
          "uses": "cachix/install-nix-action@v12",
          "with": {
            "extra_nix_config": "experimental-features = nix-command flakes",
            "install_url": "https://github.com/numtide/nix-flakes-installer/releases/download/nix-3.0pre20201007_5257a25/install",
            "nix_path": "nixpkgs=channel:nixos-unstable-small"
          }
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the builder\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the builder with nix\nbuilder_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  1                                    # speed factor\n  big-parallel                         # features\n)\necho \"${builder_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "uses": "cachix/cachix-action@v7",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'"
          }
        },
        {
          "name": "Build",
          "run": "nix run nixpkgs#nix-build-uncached -- \\\n  -E \"(builtins.getFlake (toString ./.)).deploy.nodes.fourier.profiles.system.path\"\n"
        }
      ]
    },
    "goethe": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v2"
        },
        {
          "uses": "cachix/install-nix-action@v12",
          "with": {
            "extra_nix_config": "experimental-features = nix-command flakes",
            "install_url": "https://github.com/numtide/nix-flakes-installer/releases/download/nix-3.0pre20201007_5257a25/install",
            "nix_path": "nixpkgs=channel:nixos-unstable-small"
          }
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the builder\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the builder with nix\nbuilder_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  1                                    # speed factor\n  big-parallel                         # features\n)\necho \"${builder_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "uses": "cachix/cachix-action@v7",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'"
          }
        },
        {
          "name": "Build",
          "run": "nix run nixpkgs#nix-build-uncached -- \\\n  -E \"(builtins.getFlake (toString ./.)).deploy.nodes.goethe.profiles.system.path\"\n"
        }
      ]
    },
    "riemann": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v2"
        },
        {
          "uses": "cachix/install-nix-action@v12",
          "with": {
            "extra_nix_config": "experimental-features = nix-command flakes",
            "install_url": "https://github.com/numtide/nix-flakes-installer/releases/download/nix-3.0pre20201007_5257a25/install",
            "nix_path": "nixpkgs=channel:nixos-unstable-small"
          }
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the builder\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the builder with nix\nbuilder_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  1                                    # speed factor\n  big-parallel                         # features\n)\necho \"${builder_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "uses": "cachix/cachix-action@v7",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'"
          }
        },
        {
          "name": "Build",
          "run": "nix run nixpkgs#nix-build-uncached -- \\\n  -E \"(builtins.getFlake (toString ./.)).deploy.nodes.riemann.profiles.system.path\"\n"
        }
      ]
    },
    "sartre": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "uses": "actions/checkout@v2"
        },
        {
          "uses": "cachix/install-nix-action@v12",
          "with": {
            "extra_nix_config": "experimental-features = nix-command flakes",
            "install_url": "https://github.com/numtide/nix-flakes-installer/releases/download/nix-3.0pre20201007_5257a25/install",
            "nix_path": "nixpkgs=channel:nixos-unstable-small"
          }
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the builder\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the builder with nix\nbuilder_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  1                                    # speed factor\n  big-parallel                         # features\n)\necho \"${builder_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "uses": "cachix/cachix-action@v7",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'"
          }
        },
        {
          "name": "Build",
          "run": "nix run nixpkgs#nix-build-uncached -- \\\n  -E \"(builtins.getFlake (toString ./.)).deploy.nodes.sartre.profiles.system.path\"\n"
        }
      ]
    }
  },
  "name": "CI",
  "on": {
    "pull_request": {
      "branches": [
        "**"
      ]
    },
    "push": {
      "branches": [
        "master"
      ]
    }
  }
}
