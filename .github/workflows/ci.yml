{
  "jobs": {
    "abel": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "abel",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "aquinas": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "aquinas",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "bohr": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "bohr",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "cantor": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "cantor",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "feuerbach": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "feuerbach",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "formatting": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Formatting",
          "run": "nix-shell --run 'nixpkgs-fmt --check .'"
        }
      ]
    },
    "goethe": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "goethe",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "hegel": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "hegel",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "parsing": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Parsing",
          "run": "find . -name \"*.nix\" -exec nix-instantiate --parse --quiet {} >/dev/null +"
        }
      ]
    },
    "peano": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "peano",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    },
    "sartre": {
      "runs-on": "ubuntu-latest",
      "steps": [
        {
          "name": "Checkout",
          "uses": "actions/checkout@v2"
        },
        {
          "name": "Nix",
          "uses": "cachix/install-nix-action@v8"
        },
        {
          "name": "AArch64",
          "run": "# first create the ssh config dir for root\nsudo mkdir -p /root/.ssh\n\n# now add the key for the build slave\necho \"${{ secrets.AARCH64_BOX_KEY }}\" |\n    sudo tee /root/.ssh/aarch64.community.nixos > /dev/null\nsudo chmod 0600 /root/.ssh/aarch64.community.nixos\n\n# and make it a known host\necho \"${{ secrets.KNOWN_HOSTS }}\" |\n    sudo tee -a /root/.ssh/known_hosts > /dev/null\n\n# lastly register the build slave with nix\nslave_cfg=(\n  lovesegfault@aarch64.nixos.community # user/addr\n  aarch64-linux                        # arch\n  /root/.ssh/aarch64.community.nixos   # key\n  64                                   # maxJobs\n  8                                    # speed factor\n  big-parallel                         # features\n)\necho \"${slave_cfg[*]}\" |\n    sudo tee /etc/nix/machines > /dev/null\n"
        },
        {
          "name": "Cachix Setup",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": true
          }
        },
        {
          "name": "Cachix Build",
          "uses": "cachix/cachix-action@v5",
          "with": {
            "attributes": "sartre",
            "name": "nix-config",
            "signingKey": "'${{ secrets.CACHIX_SIGNING_KEY }}'",
            "skipNixBuild": false
          }
        }
      ]
    }
  },
  "name": "CI",
  "on": [
    "pull_request",
    "push"
  ]
}
