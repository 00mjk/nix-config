#! /usr/bin/env bash
set -o pipefail -o noclobber -o nounset

function cprint() {
    if [ "$#" -lt 2 ]; then
        printf "Broken usage of cprint\n"
        exit 1
    fi
    local color="$1"
    local msg="${*:2}"
    local reset=""
    [ -z ${NO_COLOR+1} ] && reset="$(tput sgr0)"

    printf "%s%s%s" "$color" "$msg" "$reset"
}

function error() {
    local red=""
    [ -z ${NO_COLOR+1} ] && red="$(tput setaf 1)"
    cprint "$red" "$@" $'\n'
    exit 1
}

function warn() {
    local yellow=""
    [ -z ${NO_COLOR+1} ] && yellow="$(tput setaf 3)"
    cprint "$yellow" "$@"
}

function ok() {
    local green=""
    [ -z ${NO_COLOR+1} ] && green="$(tput setaf 2)"
    cprint "$green" "$@"
}

function info() {
    local blue=""
    [ -z ${NO_COLOR+1} ] && blue="$(tput setaf 4)"
    cprint "$blue" "$@"
}

function test_syntax() {
    ok $'>>>> Syntax Test\n'
    readarray -d '' files < <(find ./ -name "*.nix" -print0)
    for src in "${files[@]}"; do
        info "$src: "
        nix-instantiate --quiet --parse "$src" >/dev/null || error "Failed to parse $src"
        ok $'OK\n'
    done
}

function test_formatting() {
    ok $'>>>> Formatting Test\n'
    readarray -d '' files < <(find ./ -name "*.nix" -print0)
    for src in "${files[@]}"; do
        info "$src: "
        nixfmt -c "$src" >/dev/null || error "Formatting check failed for $src"
        ok $'OK\n'
    done
}

function test_system() {
    ok $'>>>> System Test\n'
    readarray -d '' machines < <(find ./system/machines -name "*.nix" -print0)
    for machine in "${machines[@]}"; do
        local name
        name="$(basename -s ".nix" "$machine")"
        info "$name: "

        # FIXME
        [ "$name" == "comte" ] && warn "skip" $'\n' && continue

        local out
        local tmp
        local err

        tmp=$(mktemp)
        out=$(nix-build '<nixpkgs/nixos>' -A vm --arg configuration "$machine" 2>|"$tmp")
        local status="$?"
        err=$(cat "$tmp")
        rm "$tmp"

        [ "$status" == "0" ] || error "Failed to build $name" $'\n' "$err"
        [ -z ${CACHIX_PUSH+1} ] || cachix push nix-config "$out"
        ok 'OK' "($out)" $'\n'
    done
}

function test_home() {
    ok $'>>>> Home Test\n'
    readarray -d '' machines < <(find ./home/machines -name "*.nix" -print0)
    for machine in "${machines[@]}"; do
        local name
        name="$(basename -s ".nix" "$machine")"
        info "$name: "

        local out
        local tmp
        local err

        tmp=$(mktemp)
        out=$(home-manager -f "$machine" build 2>|"$tmp")
        local status="$?"
        err=$(cat "$tmp")
        rm "$tmp"

        [ "$status" == "0" ] || error "Failed to build $name" $'\n' "$err"
        [ -z ${CACHIX_PUSH+1} ] || cachix push nix-config "$out"
        ok 'OK' "($out)" $'\n'
    done
}

test_syntax
test_formatting
test_system
test_home
