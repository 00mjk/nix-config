#! /usr/bin/env bash
set -o pipefail -o noclobber -o nounset

SWITCH=1
DRY_RUN=0
SYSTEM_BOOT=0

function cprint() {
    if [ "$#" -lt 2 ]; then
        printf "Broken usage of cprint\n"
        exit 1
    fi
    local color="$1"
    local msg="${*:2}"
    local reset
    reset="$(tput sgr0)"

    [ -z ${NO_COLOR+1} ] || color=""
    [ -z ${NO_COLOR+1} ] || reset=""

    printf "%s%s%s\n" "$color" "$msg" "$reset"
}

function error() {
    local red
    red="$(tput setaf 1)"
    cprint "$red" "$@"
    exit 1
}

function warn() {
    local yellow
    yellow="$(tput setaf 3)"
    cprint "$yellow" "$@"
}

function check_sudo() {
    [ "$#" -eq 0 ] || error "check_sudo"
    [ $DRY_RUN == 0 ] || return
    [ -x "$(command -v sudo)" ] || error "Sudo not available."
    [[ $USER == *"not allowed to run sudo"* ]] &&
        error "$USER does not have sudo privileges"
}

function set_work_dir() {
    if [[ ! -v WORK_DIR ]]; then
        WORK_DIR="$(mktemp --tmpdir -u nix-config-sync.XXXXXXXXXX)"
        # shellcheck disable=2064
        trap "rm -rf '$WORK_DIR'" EXIT
    fi
}

function build() {
    [ "$#" -eq 0 ] || error "build"
    set_work_dir
    local machine
    machine="$(hostname)"
    [ $DRY_RUN == 1 ] && return
    unset NIX_PATH
    nix-build --out-link "$WORK_DIR" -A "$machine" ||
        error "Failed to build system"
}

function switch() {
    [ "$#" -eq 0 ] || error "switch"
    set_work_dir
    local op=""
    if [ $SYSTEM_BOOT = 1 ]; then
        op="boot"
    else
        op="switch"
    fi

    local switch="$WORK_DIR/bin/switch-to-configuration"
    [ $DRY_RUN == 1 ] && return
    sudo nix-env --set \
        --profile "/nix/var/nix/profiles/system" \
        "$WORK_DIR"
    sudo "$switch" "$op" ||
        error "Failed to activate system"
}

function check_getopt() {
    [ "$#" -eq 0 ] || error "check_getopt"
    ! getopt --test >/dev/null
    if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
        error '"getopt --test" failed in this environment.'
    fi
}

function parse_opts() {
    check_getopt
    local short_opts="bdn"
    local long_opts="boot,dry-run,no-switch"
    local parsed
    ! parsed=$(getopt --options="$short_opts" --longoptions="$long_opts" --name "$0" -- "$@")
    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        error "Wrong arguments passed"
    fi
    eval set -- "$parsed"
    while true; do
        case "$1" in
        -b | --boot)
            SYSTEM_BOOT=1
            shift
            ;;
        -d | --dry-run)
            DRY_RUN=1
            shift
            ;;
        -n | --no-switch)
            SWITCH=0
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            error "Invalid argument"
            ;;
        esac
    done
}

function main() {
    [ $DRY_RUN == 1 ] && warn "dry run"
    parse_opts "$@"
    check_sudo
    build
    [ $SWITCH == 1 ] && switch
    exit 0
}

main "$@"
